/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardImport } from './routes/_dashboard'
import { Route as AuthImport } from './routes/_auth'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardStaffIndexImport } from './routes/_dashboard/staff/index'
import { Route as DashboardProfileIndexImport } from './routes/_dashboard/profile/index'
import { Route as DashboardOrganizationIndexImport } from './routes/_dashboard/organization/index'
import { Route as DashboardNotAccessIndexImport } from './routes/_dashboard/not-access/index'
import { Route as AuthLoginIndexImport } from './routes/_auth/login/index'

// Create/Update Routes

const DashboardRoute = DashboardImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardStaffIndexRoute = DashboardStaffIndexImport.update({
  id: '/staff/',
  path: '/staff/',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardProfileIndexRoute = DashboardProfileIndexImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardOrganizationIndexRoute = DashboardOrganizationIndexImport.update(
  {
    id: '/organization/',
    path: '/organization/',
    getParentRoute: () => DashboardRoute,
  } as any,
)

const DashboardNotAccessIndexRoute = DashboardNotAccessIndexImport.update({
  id: '/not-access/',
  path: '/not-access/',
  getParentRoute: () => DashboardRoute,
} as any)

const AuthLoginIndexRoute = AuthLoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => AuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/_auth/login/': {
      id: '/_auth/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginIndexImport
      parentRoute: typeof AuthImport
    }
    '/_dashboard/not-access/': {
      id: '/_dashboard/not-access/'
      path: '/not-access'
      fullPath: '/not-access'
      preLoaderRoute: typeof DashboardNotAccessIndexImport
      parentRoute: typeof DashboardImport
    }
    '/_dashboard/organization/': {
      id: '/_dashboard/organization/'
      path: '/organization'
      fullPath: '/organization'
      preLoaderRoute: typeof DashboardOrganizationIndexImport
      parentRoute: typeof DashboardImport
    }
    '/_dashboard/profile/': {
      id: '/_dashboard/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof DashboardProfileIndexImport
      parentRoute: typeof DashboardImport
    }
    '/_dashboard/staff/': {
      id: '/_dashboard/staff/'
      path: '/staff'
      fullPath: '/staff'
      preLoaderRoute: typeof DashboardStaffIndexImport
      parentRoute: typeof DashboardImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthLoginIndexRoute: typeof AuthLoginIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginIndexRoute: AuthLoginIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface DashboardRouteChildren {
  DashboardNotAccessIndexRoute: typeof DashboardNotAccessIndexRoute
  DashboardOrganizationIndexRoute: typeof DashboardOrganizationIndexRoute
  DashboardProfileIndexRoute: typeof DashboardProfileIndexRoute
  DashboardStaffIndexRoute: typeof DashboardStaffIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardNotAccessIndexRoute: DashboardNotAccessIndexRoute,
  DashboardOrganizationIndexRoute: DashboardOrganizationIndexRoute,
  DashboardProfileIndexRoute: DashboardProfileIndexRoute,
  DashboardStaffIndexRoute: DashboardStaffIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof DashboardRouteWithChildren
  '/login': typeof AuthLoginIndexRoute
  '/not-access': typeof DashboardNotAccessIndexRoute
  '/organization': typeof DashboardOrganizationIndexRoute
  '/profile': typeof DashboardProfileIndexRoute
  '/staff': typeof DashboardStaffIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof DashboardRouteWithChildren
  '/login': typeof AuthLoginIndexRoute
  '/not-access': typeof DashboardNotAccessIndexRoute
  '/organization': typeof DashboardOrganizationIndexRoute
  '/profile': typeof DashboardProfileIndexRoute
  '/staff': typeof DashboardStaffIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_dashboard': typeof DashboardRouteWithChildren
  '/_auth/login/': typeof AuthLoginIndexRoute
  '/_dashboard/not-access/': typeof DashboardNotAccessIndexRoute
  '/_dashboard/organization/': typeof DashboardOrganizationIndexRoute
  '/_dashboard/profile/': typeof DashboardProfileIndexRoute
  '/_dashboard/staff/': typeof DashboardStaffIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/not-access'
    | '/organization'
    | '/profile'
    | '/staff'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/not-access'
    | '/organization'
    | '/profile'
    | '/staff'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_dashboard'
    | '/_auth/login/'
    | '/_dashboard/not-access/'
    | '/_dashboard/organization/'
    | '/_dashboard/profile/'
    | '/_dashboard/staff/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  DashboardRoute: typeof DashboardRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  DashboardRoute: DashboardRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/_dashboard"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/login/"
      ]
    },
    "/_dashboard": {
      "filePath": "_dashboard.tsx",
      "children": [
        "/_dashboard/not-access/",
        "/_dashboard/organization/",
        "/_dashboard/profile/",
        "/_dashboard/staff/"
      ]
    },
    "/_auth/login/": {
      "filePath": "_auth/login/index.tsx",
      "parent": "/_auth"
    },
    "/_dashboard/not-access/": {
      "filePath": "_dashboard/not-access/index.tsx",
      "parent": "/_dashboard"
    },
    "/_dashboard/organization/": {
      "filePath": "_dashboard/organization/index.tsx",
      "parent": "/_dashboard"
    },
    "/_dashboard/profile/": {
      "filePath": "_dashboard/profile/index.tsx",
      "parent": "/_dashboard"
    },
    "/_dashboard/staff/": {
      "filePath": "_dashboard/staff/index.tsx",
      "parent": "/_dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
